from __future__ import annotations
# meta programming  

from typing import List, Union

from indentprinter import IndentPrinter

__all__ = ['Loss', 'AbstractLossNode', 'writeCode']

class AbstractLossNode:
    def __init__(
        self, name, children: List[Union[AbstractLossNode, str]], 
    ) -> None:
        self.name = name
        self.children = children

        self.class_name = name[0].upper() + name[1:]

class Loss:
    def sum(self, loss_weights: List):
        acc = 0
        for name, weight, sub_weights in loss_weights:
            child = self.__getattribute__(name)
            if sub_weights is None:
                acc += weight * child
            else:
                assert len(sub_weights)
                acc += weight * child.sum(sub_weights)
        return acc

def writeCode(file, root: AbstractLossNode):
    def p(*a, **kw):
        print(*a, file=file, **kw)
    p('from __future__ import annotations')
    module_name = 'loss_tree' if __name__ == '__main__' else __name__
    p(f'# Auto generated by torchWork.{module_name} . Do not modify!')
    p()
    p(f'from torchWork import Loss')
    p()
    dfs(p, root)

def dfs(p, node: AbstractLossNode):
    p(f'class {node.class_name}(Loss):')
    with IndentPrinter(p) as p:
        p('__slots__ = [', end='')
        for child in node.children:
            if isinstance(child, AbstractLossNode):
                p(f"'{child.name}', ", end='')
            else:
                p(f"'{child}', ", end='')
        p(']')

        for child in node.children:
            if isinstance(child, AbstractLossNode):
                dfs(p, child)
        
        p('def __init__(self):')
        with IndentPrinter(p) as p:
            for child in node.children:
                if isinstance(child, AbstractLossNode):
                    p('self.%s: __class__.%s = __class__.%s()' % (
                        child.name, child.class_name, child.class_name, 
                    ))
                else:
                    p('self.%s: float = None' % child)
    p()

def demo():
    with open('losses.py', 'w') as f:
        writeCode(f, AbstractLossNode('total_loss', [
            AbstractLossNode('vae', ['reconstruct', 'kld']), 
            AbstractLossNode('vrnn', [
                AbstractLossNode('predict', ['z', 'image']), 
                'kld', 
            ]), 
            'weight_decay',
        ]))

if __name__ == '__main__':
    demo()
